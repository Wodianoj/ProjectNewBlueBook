-- MySQL Workbench Forward Engineering
-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;
-- -----------------------------------------------------
-- Table `mydb`.`ROLES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ROLES` (
`ROLE_ID` INT NOT NULL AUTO_INCREMENT,
`NAME` VARCHAR(64) NOT NULL,
`DESCRIPTION` VARCHAR(512) NULL,
PRIMARY KEY (`ROLE_ID`),
UNIQUE INDEX `name_UNIQUE` (`NAME` ASC) ,
UNIQUE INDEX `role_id_UNIQUE` (`ROLE_ID` ASC) )
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`ACCESS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ACCESS` (
`ACCESS_ID` INT NOT NULL AUTO_INCREMENT,
`LEVEL` INT ZEROFILL NOT NULL,
`DESCRIPTION` VARCHAR(64) NOT NULL,
PRIMARY KEY (`ACCESS_ID`),
UNIQUE INDEX `level_UNIQUE` (`LEVEL` ASC) ,
UNIQUE INDEX `name_UNIQUE` (`DESCRIPTION` ASC) ,
UNIQUE INDEX `id_UNIQUE` (`ACCESS_ID` ASC) )
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`USERS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`USERS` (
`USER_ID` INT NOT NULL AUTO_INCREMENT,
`EMAIL` VARCHAR(320) NOT NULL,
`NAME` VARCHAR(64) NOT NULL,
`SURNAME` VARCHAR(64) NOT NULL,
`REGISTRATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
`ADDRESS` VARCHAR(256) NOT NULL,
`PHONE` VARCHAR(15) NULL,
`PASSWORD` VARBINARY(64) NOT NULL,
`ROLE_ID` INT NOT NULL,
`ACCESS_ID` INT NOT NULL,
PRIMARY KEY (`USER_ID`),
UNIQUE INDEX `id_UNIQUE` (`USER_ID` ASC) ,
UNIQUE INDEX `email_UNIQUE` (`EMAIL` ASC) ,
INDEX `user_role_id_idx` (`ROLE_ID` ASC) ,
INDEX `user_access_level_id_idx` (`ACCESS_ID` ASC) ,
CONSTRAINT `FX_U_R`
FOREIGN KEY (`ROLE_ID`)
REFERENCES `mydb`.`ROLES` (`ROLE_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_U_A`
FOREIGN KEY (`ACCESS_ID`)
REFERENCES `mydb`.`ACCESS` (`ACCESS_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION);
-- -----------------------------------------------------
-- Table `mydb`.`OBSERVERS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OBSERVERS` (
`OBSERVER_ID` INT NOT NULL AUTO_INCREMENT,
`NAME` VARCHAR(64) NULL,
`SURNAME` VARCHAR(64) NULL,
`ALIAS` VARCHAR(128) NULL,
`ADDRESS` VARCHAR(512) NULL,
`CONTACT` VARCHAR(512) NULL,
`PHOTO` VARCHAR(512) NULL,
`DESCRIPTION` VARCHAR(512) NULL,
PRIMARY KEY (`OBSERVER_ID`),
UNIQUE INDEX `role_id_UNIQUE` (`OBSERVER_ID` ASC) )
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`OBSERVATIONS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OBSERVATIONS` (
`OBSERVATION_ID` INT NOT NULL AUTO_INCREMENT,
`OBSERVATION_DATE` INT NOT NULL,
`COORDINATES` POINT NOT NULL,
`DESCRIPTION` TEXT NOT NULL,
`PATH_TO_MATERIALS` VARCHAR(128) NOT NULL,
`ACCESS_ID` INT NOT NULL,
PRIMARY KEY (`OBSERVATION_ID`),
UNIQUE INDEX `id_UNIQUE` (`OBSERVATION_ID` ASC) ,
INDEX `observation_access_level_id_idx` (`ACCESS_ID` ASC) ,
CONSTRAINT `FX_O_A`
FOREIGN KEY (`ACCESS_ID`)
REFERENCES `mydb`.`ACCESS` (`ACCESS_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = ' ';
-- -----------------------------------------------------
-- Table `mydb`.`INTERPRETATIONS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`INTERPRETATIONS` (
`INTERPRETATION_ID` INT NOT NULL AUTO_INCREMENT,
`NAME` VARCHAR(64) NOT NULL,
`AVAILABLE` TINYINT NOT NULL,
PRIMARY KEY (`INTERPRETATION_ID`),
UNIQUE INDEX `name_UNIQUE` (`NAME` ASC) ,
UNIQUE INDEX `INTERPRETATION_ID_UNIQUE` (`INTERPRETATION_ID` ASC) )
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`CLASSIFICATIONS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CLASSIFICATIONS` (
`CLASSIFICATION_ID` INT NOT NULL AUTO_INCREMENT,
`NAME` VARCHAR(64) NOT NULL,
`AVAILABLE` TINYINT NOT NULL,
PRIMARY KEY (`CLASSIFICATION_ID`),
UNIQUE INDEX `name_UNIQUE` (`NAME` ASC) ,
UNIQUE INDEX `id_UNIQUE` (`CLASSIFICATION_ID` ASC) )
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`ANALYSES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ANALYSES` (
`ANALYSIS_ID` INT NOT NULL AUTO_INCREMENT,
`REGISTRATION_DATE` DATETIME NOT NULL,
`DESCRIPTION` TEXT NOT NULL,
`RESULTS` TEXT NOT NULL,
`OBSERVATION_ID` INT NOT NULL,
`REGISTERED_BY_ID` INT NOT NULL,
`CLASSIFICATION_ID` INT NOT NULL,
`INTERPRETATION_ID` INT NOT NULL,
PRIMARY KEY (`ANALYSIS_ID`),
INDEX `analysis_interpretation_id_idx` (`INTERPRETATION_ID` ASC) ,
INDEX `analysis_classification_id_idx` (`CLASSIFICATION_ID` ASC) ,
INDEX `analysis_observation_id_idx` (`OBSERVATION_ID` ASC) ,
INDEX `analysis_registered_by_id_idx` (`REGISTERED_BY_ID` ASC) ,
CONSTRAINT `FX_A_I`
FOREIGN KEY (`INTERPRETATION_ID`)
REFERENCES `mydb`.`INTERPRETATIONS` (`INTERPRETATION_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_O`
FOREIGN KEY (`OBSERVATION_ID`)
REFERENCES `mydb`.`OBSERVATIONS` (`OBSERVATION_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_C`
FOREIGN KEY (`CLASSIFICATION_ID`)
REFERENCES `mydb`.`CLASSIFICATIONS` (`CLASSIFICATION_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_U`
FOREIGN KEY (`REGISTERED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = ' ';
-- -----------------------------------------------------
-- Table `mydb`.`OBSERVATION_TO_OBSERVER`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OBSERVATION_TO_OBSERVER` (
`RELATION_ID` INT NOT NULL AUTO_INCREMENT,
`OBSERVATION_ID` INT NOT NULL,
`OBSERVER_ID` INT NOT NULL,
PRIMARY KEY (`RELATION_ID`),
INDEX `bind_observation_id_idx` (`OBSERVATION_ID` ASC) ,
INDEX `bind_observer_id_idx` (`OBSERVER_ID` ASC) ,
UNIQUE INDEX `RELATION_ID_UNIQUE` (`RELATION_ID` ASC) ,
CONSTRAINT `FX_OBSERVATION`
FOREIGN KEY (`OBSERVATION_ID`)
REFERENCES `mydb`.`OBSERVATIONS` (`OBSERVATION_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_OBSERVER`
FOREIGN KEY (`OBSERVER_ID`)
REFERENCES `mydb`.`OBSERVERS` (`OBSERVER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`APPLICATIONS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`APPLICATIONS` (
`APPLICATION_ID` INT NOT NULL AUTO_INCREMENT,
`NAME` VARCHAR(64) NOT NULL,
`SURNAME` VARCHAR(64) NOT NULL,
`SUBMISSION_DATE` DATETIME NOT NULL,
`ADDRESS` VARCHAR(256) NOT NULL,
`PHONE` VARCHAR(15) NULL,
`EMAIL` VARCHAR(320) NOT NULL,
`PASSWORD` VARBINARY(64) NOT NULL,
`NOTE` TEXT NULL,
`RESOLUTION_DATE` DATETIME NULL,
`RESOLVED_POSITIVELY` TINYINT NULL,
`NEW_USER_ID` INT NULL,
`RESOLVED_BY_ID` INT NULL,
`APPLIED_ROLE_ID` INT NULL,
`APPLIED_ACCESS_ID` INT NULL,
`GRANTED_ROLE_ID` INT NULL,
`GRANTED_ACCESS_ID` INT NULL,
PRIMARY KEY (`APPLICATION_ID`),
UNIQUE INDEX `registered_user_id_UNIQUE` (`NEW_USER_ID` ASC) ,
INDEX `user_request_requested_role_id_idx` (`APPLIED_ROLE_ID` ASC) ,
INDEX `user_request_granted_access_level_idx` (`GRANTED_ACCESS_ID` ASC)
,
INDEX `user_request_granted_role_id_idx` (`GRANTED_ROLE_ID` ASC) ,
INDEX `user_request_resolved_by_id_idx` (`RESOLVED_BY_ID` ASC) ,
INDEX `FX_A_AA_idx` (`APPLIED_ACCESS_ID` ASC) ,
UNIQUE INDEX `APPLICATION_ID_UNIQUE` (`APPLICATION_ID` ASC) ,
CONSTRAINT `FX_A_AR`
FOREIGN KEY (`APPLIED_ROLE_ID`)
REFERENCES `mydb`.`ROLES` (`ROLE_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_AA`
FOREIGN KEY (`APPLIED_ACCESS_ID`)
REFERENCES `mydb`.`ACCESS` (`ACCESS_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_GA`
FOREIGN KEY (`GRANTED_ACCESS_ID`)
REFERENCES `mydb`.`ACCESS` (`ACCESS_ID`)
ON DELETE SET NULL
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_GR`
FOREIGN KEY (`GRANTED_ROLE_ID`)
REFERENCES `mydb`.`ROLES` (`ROLE_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_U_RB`
FOREIGN KEY (`RESOLVED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_A_U_NU`
FOREIGN KEY (`NEW_USER_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`USER_ACTIVITY`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`USER_ACTIVITY` (
`USER_ACTIVITY_ID` INT NOT NULL AUTO_INCREMENT,
`LOGIN_DATE` DATETIME NOT NULL,
`LOGOUT_DATE` DATETIME NULL,
`USER_ID` INT NOT NULL,
PRIMARY KEY (`USER_ACTIVITY_ID`),
INDEX `FX_L_U_idx` (`USER_ID` ASC) ,
CONSTRAINT `FX_L_U`
FOREIGN KEY (`USER_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`FUNCTIONALITIES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`FUNCTIONALITIES` (
`FUNCTIONALITY_ID` INT NOT NULL AUTO_INCREMENT,
`NAME` VARCHAR(128) NOT NULL,
PRIMARY KEY (`FUNCTIONALITY_ID`),
UNIQUE INDEX `NAME_UNIQUE` (`NAME` ASC) )
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`FUNCTIONALITY_USES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`FUNCTIONALITY_USES` (
`FUNCTIONALITY_USE_ID` INT NOT NULL AUTO_INCREMENT,
`USER_ID` INT NOT NULL,
`USE_DATE` DATETIME NOT NULL,
`FUNCTIONALITY_ID` INT NOT NULL,
PRIMARY KEY (`FUNCTIONALITY_USE_ID`),
INDEX `FX_FU_U_idx` (`USER_ID` ASC) ,
INDEX `FX_FU_F_idx` (`FUNCTIONALITY_ID` ASC) ,
CONSTRAINT `FX_FU_U`
FOREIGN KEY (`USER_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_FU_F`
FOREIGN KEY (`FUNCTIONALITY_ID`)
REFERENCES `mydb`.`FUNCTIONALITIES` (`FUNCTIONALITY_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`INTERPRETATION_LOGS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`INTERPRETATION_LOGS` (
`INTERPRETATION_LOG_ID` INT NOT NULL AUTO_INCREMENT,
`INTERPRETATION_ID` INT NOT NULL,
`NAME` VARCHAR(64) NOT NULL,
`AVAILABLE` TINYINT NOT NULL,
`VALID_FROM` DATETIME NOT NULL,
`VALID_TO` DATETIME NULL,
`CREATED_BY_ID` INT NOT NULL,
`REMOVED_BY_ID` INT NULL,
PRIMARY KEY (`INTERPRETATION_LOG_ID`),
UNIQUE INDEX `name_UNIQUE` (`NAME` ASC) ,
UNIQUE INDEX `INTERPRETATION_LOG_ID_UNIQUE`
(`INTERPRETATION_LOG_ID` ASC) ,
INDEX `FX_IL_I_idx` (`INTERPRETATION_ID` ASC) ,
INDEX `FX_IL_U_CB_idx` (`CREATED_BY_ID` ASC) ,
INDEX `FX_IL_U_RB_idx` (`REMOVED_BY_ID` ASC) ,
CONSTRAINT `FX_IL_I`
FOREIGN KEY (`INTERPRETATION_ID`)
REFERENCES `mydb`.`INTERPRETATIONS` (`INTERPRETATION_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_IL_U_CB`
FOREIGN KEY (`CREATED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_IL_U_RB`
FOREIGN KEY (`REMOVED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`USER_LOGS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`USER_LOGS` (
`USER_LOG_ID` INT NOT NULL AUTO_INCREMENT,
`USER_ID` INT NOT NULL,
`EMAIL` VARCHAR(320) NOT NULL,
`NAME` VARCHAR(64) NOT NULL,
`SURNAME` VARCHAR(64) NOT NULL,
`REGISTRATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
`ADDRESS` VARCHAR(256) NOT NULL,
`PHONE` VARCHAR(15) NULL,
`PASSWORD` VARBINARY(32) NOT NULL,
`ROLE_ID` INT NOT NULL,
`ACCESS_ID` INT NOT NULL,
`DATE_FROM` DATETIME NOT NULL,
`DATE_TO` DATETIME NULL,
`CREATED_BY_ID` INT NOT NULL,
`REMOVED_BY_ID` INT NULL,
PRIMARY KEY (`USER_LOG_ID`),
INDEX `user_role_id_idx` (`ROLE_ID` ASC) ,
INDEX `user_access_level_id_idx` (`ACCESS_ID` ASC) ,
UNIQUE INDEX `USER_LOG_ID_UNIQUE` (`USER_LOG_ID` ASC) ,
INDEX `FX_UL_U_idx` (`USER_ID` ASC) ,
INDEX `FX_UL_U_CB_idx` (`CREATED_BY_ID` ASC) ,
INDEX `FX_UL_U_RB_idx` (`REMOVED_BY_ID` ASC) ,
CONSTRAINT `FX_UL_R`
FOREIGN KEY (`ROLE_ID`)
REFERENCES `mydb`.`ROLES` (`ROLE_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_UL_A`
FOREIGN KEY (`ACCESS_ID`)
REFERENCES `mydb`.`ACCESS` (`ACCESS_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_UL_U`
FOREIGN KEY (`USER_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_UL_U_CB`
FOREIGN KEY (`CREATED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_UL_U_RB`
FOREIGN KEY (`REMOVED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION);
-- -----------------------------------------------------
-- Table `mydb`.`DUPLICATED_OBSERVERS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`DUPLICATED_OBSERVERS` (
`DUPLICATED_OBSERVERS_ID` INT NOT NULL AUTO_INCREMENT,
`OBSERVER_ONE_ID` INT NOT NULL,
`OBSERVER_TWO_ID` INT NOT NULL,
`DISCOVERY_DATE` DATETIME NOT NULL,
`RESOLVED` TINYINT NOT NULL,
`MERGED_BY_ID` INT NULL,
`MERGE_DATE` DATETIME NULL,
PRIMARY KEY (`DUPLICATED_OBSERVERS_ID`),
UNIQUE INDEX `DUPLICATED_OBSERVERS_ID_UNIQUE`
(`DUPLICATED_OBSERVERS_ID` ASC) ,
INDEX `FX_DO_U1_idx` (`OBSERVER_ONE_ID` ASC) ,
INDEX `FX_DO_U2_idx` (`OBSERVER_TWO_ID` ASC) ,
INDEX `FX_DO_U_MB_idx` (`MERGED_BY_ID` ASC) ,
CONSTRAINT `FX_DO_U1`
FOREIGN KEY (`OBSERVER_ONE_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_DO_U2`
FOREIGN KEY (`OBSERVER_TWO_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT `FX_DO_U_MB`
FOREIGN KEY (`MERGED_BY_ID`)
REFERENCES `mydb`.`USERS` (`USER_ID`)
ON DELETE NO ACTION
ON UPDATE NO ACTION)
ENGINE = InnoDB;
USE `mydb` ;
-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`OBSERVATION_STATISTICS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`OBSERVATION_STATISTICS`
(`OBSERVATION_ID` INT, `ACCESS_ID` INT, `CLASSIFICATION_ID` INT,
`INTERPRETATION_ID` INT);
-- -----------------------------------------------------
-- View `mydb`.`OBSERVATION_STATISTICS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OBSERVATION_STATISTICS`;
USE `mydb`;
CREATE OR REPLACE VIEW `OBSERVATION_STATISTICS` AS
SELECT O.OBSERVATION_ID, O.ACCESS_ID, A.CLASSIFICATION_ID,
A.INTERPRETATION_ID
FROM OBSERVATIONS O
LEFT JOIN ANALYSES A
ON A.OBSERVATION_ID = O.OBSERVATION_ID;